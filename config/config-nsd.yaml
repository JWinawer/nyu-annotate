################################################################################
# config/config.yaml

display:
  # We want images to be 512 x 512 pixels.
  figsize: [4, 4]
  dpi: 128
  plot_options:
    color: [0.25, 0.25, 0.75]
    linewidth: 1
    markersize: 0
    linestyle: "solid"
  fg_options:
    color: [0.55, 0.55, 0.9]
    markersize: 2

init: |
    # Import libraries.
    import neuropythy as ny, numpy as np
    nsd_path = ny.util.pseudo_path('s3://natural-scenes-dataset/nsddata/',
                                   cache_path='/cache/nsd')
    nsd_prf_files = {'polar_angle': 'prf_angle.nii.gz',
                     'eccentricity': 'prf_eccentricity.nii.gz',
                     'cod': 'prf_R2.nii.gz'}
    # This is the neuropythy mask of the occipital pole for making flatmaps.
    occpole_mask = ('parcellation', 43)
# We assume in this example that the libraries neuropythy and numpy have been
# imported (as ny and np respectively) in the init section (see below).
targets:
    # The Subject ID is selectable because there are 3 of them.
    Subject ID:
        - subj01
        - subj02
        - subj03
        - subj04
        - subj05
        - subj06
        - subj07
    subject: |
        return nsd_subject(target['Subject ID'])
    Hemisphere:
        - LH
        - RH
    subject: |
        # Load FreeSurfer subject.
        sid = target['Subject ID']
        sub = ny.freesurfer_subject(nsd_path.subpath('freesurfer', sid))
        # Load the various PRF data.
        func_path = nsd_path.subpath('ppdata', sid, 'func1mm')
        # Load the functional PRF parameter images.
        images = {k: ny.load(func_path.subpath(v))
                  for (k,v) in nsd_prf_files.items()}
        # Load the cortical surface transformations.
        tx_path = nsd_path.subpath('ppdata', sid, 'transforms')
        tx = {h: np.mean([ny.load(tx_path.subpath(f'{h}.func1pt0-to-{s}.mgz'))
                          for s in ('white', 'pial')],
                         axis=0)
              for h in ['lh', 'rh']}
        # Fix the polar angle to how Neuropythy likes it.
        # Round these for nearest interpolation.
        lh_tx = tuple(tx['lh'].T.round().astype(int) - 1)
        rh_tx = tuple(tx['rh'].T.round().astype(int) - 1)
        # Create lh and rh cortices with the interpolated properties.
        lprops = {k: im.get_fdata()[lh_tx] for (k,im) in images.items()}
        rprops = {k: im.get_fdata()[rh_tx] for (k,im) in images.items()}
        for props in [lprops, rprops]:
            ang = props['polar_angle']
            props['theta'] = ang * np.pi/180
            props['polar_angle'] = np.mod(90 - ang + 180, 360) - 180
        lh = sub.lh.with_prop(lprops)
        rh = sub.rh.with_prop(rprops)
        # Do nearest interpolation.
        return sub.with_hemi(lh=lh, rh=rh)
    flatmap: |
        # Make a flatmap projection of the occipital cortex.
        sub = target['subject']
        h = target['Hemisphere'].lower()
        hem = sub.hemis[h]
        return hem.mask_flatmap(occpole_mask,
                                map_right='right',
                                radius=np.pi/2,
                                registration='native')
    xlim: |
        x = target['flatmap'].coordinates[0]
        return (np.min(x), np.max(x))
    ylim: |
        y = target['flatmap'].coordinates[1]
        return (np.min(y), np.max(y))
    projection_data: |
      proj = target['flatmap'].meta_data['projection']
      proj = proj.copy(mesh=None)
      return proj.normalize()
      
annotations:
    Periphery:
        - ["polar_angle", "eccentricity"]
        - ["curvature", "highlight_periphery"]
    V1 boundary:
        - ["polar_angle", "eccentricity"]
        - ["curvature", "highlight_vm"]
    V2 boundary:
        - ["polar_angle", "eccentricity"]
        - ["curvature", "highlight_hm"]
    V3 boundary:
        - ["polar_angle", "eccentricity"]
        - ["curvature", "highlight_vm"]
builtin_annotations:
    Wang2015:
       type: points
       load: |
         (u,v) = target['flatmap'].tess.indexed_edges
         w = target['flatmap'].prop('wang15')
         xy = target['flatmap'].coordinates
         ii = w[u] != w[v]
         return np.mean([xy[:,u[ii]], xy[:,v[ii]]], axis=0)
       color: [1, 1, 0]
       markersize: 1
figures:
    init: "import neuropythy as ny"
    term: |
        axes.set_xlim(target['xlim'])
        axes.set_ylim(target['ylim'])
        # We also want to put the projection data into the meta-data.
        meta_data['projection'] = target['projection_data']
    highlight_vm: |
        th = target['flatmap'].prop('theta')
        h = (1 - np.abs(np.cos(th)))**2
        ny.cortex_plot(target['flatmap'], color=h, axes=axes,
                       cmap='hot', vmin=0, vmax=1)
    highlight_hm: |
        th = target['flatmap'].prop('theta')
        h = (1 - np.abs(np.sin(th)))**2
        ny.cortex_plot(target['flatmap'], color=h, axes=axes,
                       cmap='hot', vmin=0, vmax=1)
    highlight_periphery: |
        eccen = target['flatmap'].prop('eccentricity')
        maxecc = np.nanpercentile(eccen, 95)
        hl = np.sqrt(np.abs(maxecc - eccen))*np.sqrt(maxecc)
        ny.cortex_plot(target['flatmap'], color=hl, axes=axes,
                       cmap='hot', vmax=0, vmin=maxecc)
    curvature: |
        ny.cortex_plot(target['flatmap'])
    cod: |
        ny.cortex_plot(target['flatmap'], color='cod', axes=axes, cmap='hot',
                       vmin=0, vmax=1)
    _: |
        ny.cortex_plot(target['flatmap'], color=key, axes=axes)
